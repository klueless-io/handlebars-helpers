{
  "groups": [
    {
      "active": true,
      "name": "string_case_formatting",
      "base_require": "handlebars/helpers/string_case_formatting",
      "base_namespace": "Handlebars::Helpers::StringCaseFormatting",
      "description": "Case modification string manipulation methods",
      "examples": null,
      "helpers": [
        {
          "name": "back_slash",
          "description": "convert to back slash notation",
          "test_in": "the quick brown fox",
          "test_out": "the\\quick\\brown\\fox",
          "tests": [
            { "alias": "back_slash" },
            { "alias": "backward_slash" },
            { "alias": "slash_backward" }
          ],
          "aliases": ["back_slash", "backward_slash", "slash_backward"],
          "require_path": "handlebars/helpers/string_case_formatting/back_slash",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::BackSlash"
        },
        {
          "name": "camel",
          "description": "convert to camel case with first word uppercase and following words uppercase",
          "test_in": "the quick brown fox",
          "test_out": "TheQuickBrownFox",
          "tests": [
            { "alias": "camel" },
            { "alias": "camel_upper" },
            { "alias": "camelUpper" },
            { "alias": "camelU" },
            { "alias": "pascalcase" }
          ],
          "aliases": [
            "camel",
            "camel_upper",
            "camelUpper",
            "camelU",
            "pascalcase"
          ],
          "require_path": "handlebars/helpers/string_case_formatting/camel",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Camel"
        },
        {
          "name": "constantize",
          "description": "convert to constant case",
          "test_in": "the quick brown fox",
          "test_out": "THE_QUICK_BROWN_FOX",
          "tests": [{ "alias": "constantize" }, { "alias": "constant" }],
          "aliases": ["constantize", "constant"],
          "require_path": "handlebars/helpers/string_case_formatting/constantize",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Constantize"
        },
        {
          "name": "dasherize",
          "description": "convert to dash notation",
          "test_in": "the quick brown fox",
          "test_out": "the-quick-brown-fox",
          "tests": [
            { "alias": "dasherize" },
            { "alias": "dashify" },
            { "alias": "dashcase" },
            { "alias": "hyphenate" }
          ],
          "aliases": ["dasherize", "dashify", "dashcase", "hyphenate"],
          "require_path": "handlebars/helpers/string_case_formatting/dasherize",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Dasherize"
        },
        {
          "name": "dotirize",
          "description": "convert to dash notation",
          "test_in": "the quick brown fox",
          "test_out": "the.quick.brown.fox",
          "tests": [
            { "alias": "dotirize" },
            { "alias": "dotify" },
            { "alias": "dotcase" }
          ],
          "aliases": ["dotirize", "dotify", "dotcase"],
          "require_path": "handlebars/helpers/string_case_formatting/dotirize",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Dotirize"
        },
        {
          "name": "double_colon",
          "description": "double_colon notation, similar to ruby namespace",
          "test_in": "the quick brown fox",
          "test_out": "the::quick::brown::fox",
          "tests": [{ "alias": "double_colon" }],
          "aliases": ["double_colon"],
          "require_path": "handlebars/helpers/string_case_formatting/double_colon",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::DoubleColon"
        },
        {
          "name": "downcase",
          "description": "convert all characters to lower case",
          "test_in": "THE QUICK BROWN FOX",
          "test_out": "the quick brown fox",
          "tests": [{ "alias": "downcase" }, { "alias": "lowercase" }],
          "aliases": ["downcase", "lowercase"],
          "require_path": "handlebars/helpers/string_case_formatting/downcase",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Downcase"
        },
        {
          "name": "humanize",
          "description": "convert text to human case, aka capitalize",
          "test_in": "the Quick Brown Fox",
          "test_out": "The quick brown fox",
          "tests": [{ "alias": "humanize" }, { "alias": "capitalize" }],
          "aliases": ["humanize", "capitalize"],
          "require_path": "handlebars/helpers/string_case_formatting/humanize",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Humanize"
        },
        {
          "name": "lamel",
          "description": "convert to lamel case with first word lowercase and following words uppercase",
          "test_in": "The quick brown fox",
          "test_out": "theQuickBrownFox",
          "tests": [
            { "alias": "lamel" },
            { "alias": "camel_lower" },
            { "alias": "camelLower" },
            { "alias": "camelL" }
          ],
          "aliases": ["lamel", "camel_lower", "camelLower", "camelL"],
          "require_path": "handlebars/helpers/string_case_formatting/lamel",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Lamel"
        },
        {
          "name": "pluserize",
          "description": "convert to plus notation",
          "test_in": "the quick brown fox",
          "test_out": "the+quick+brown+fox",
          "tests": [
            { "alias": "pluserize" },
            { "alias": "plusify" },
            { "alias": "pluscase" }
          ],
          "aliases": ["pluserize", "plusify", "pluscase"],
          "require_path": "handlebars/helpers/string_case_formatting/pluserize",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Pluserize"
        },
        {
          "name": "slash",
          "description": "convert to slash notation, aka forward slash",
          "test_in": "the Quick brown Fox",
          "test_out": "the/Quick/brown/Fox",
          "tests": [
            { "alias": "slash" },
            { "alias": "forward_slash" },
            { "alias": "slash_forward" }
          ],
          "aliases": ["slash", "forward_slash", "slash_forward"],
          "require_path": "handlebars/helpers/string_case_formatting/slash",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Slash"
        },
        {
          "name": "snake",
          "description": "convert to snake notation",
          "test_in": "the quick brown fox",
          "test_out": "the_quick_brown_fox",
          "tests": [{ "alias": "snake" }],
          "aliases": ["snake"],
          "require_path": "handlebars/helpers/string_case_formatting/snake",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Snake"
        },
        {
          "name": "titleize",
          "description": "value converted to titleize case, aka heading case",
          "test_in": "the quick brown fox",
          "test_out": "The Quick Brown Fox",
          "tests": [
            { "alias": "titleize" },
            { "alias": "heading" },
            { "alias": "capitalize_all" }
          ],
          "aliases": ["titleize", "heading", "capitalize_all"],
          "require_path": "handlebars/helpers/string_case_formatting/titleize",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Titleize"
        },
        {
          "name": "upcase",
          "description": "convert all characters to lower case",
          "test_in": "The quick brown fox",
          "test_out": "THE QUICK BROWN FOX",
          "tests": [{ "alias": "upcase" }, { "alias": "uppercase" }],
          "aliases": ["upcase", "uppercase"],
          "require_path": "handlebars/helpers/string_case_formatting/upcase",
          "class_namespace": "Handlebars::Helpers::StringCaseFormatting::Upcase"
        }
      ]
    },
    {
      "active": true,
      "name": "string_formatting",
      "base_require": "handlebars/helpers/string_formatting",
      "base_namespace": "Handlebars::Helpers::StringFormatting",
      "description": "General purpose string manipulation helpers",
      "examples": null,
      "helpers": [
        {
          "name": "append",
          "description": "append the specified `suffix` to the given string",
          "test_in": null,
          "test_out": null,
          "tests": [
            {
              "alias": "append",
              "expected_value": "name.html",
              "params": [
                { "name": "value", "value": "name" },
                { "name": "suffix", "value": ".html" }
              ]
            },
            {
              "alias": "appendix",
              "expected_value": "name.html",
              "params": [
                { "name": "value", "value": "name" },
                { "name": "suffix", "value": ".html" }
              ]
            }
          ],
          "aliases": ["append", "appendix"],
          "require_path": "handlebars/helpers/string_formatting/append",
          "class_namespace": "Handlebars::Helpers::StringFormatting::Append"
        },
        {
          "name": "pluralize",
          "description": "singular value is converted to plural form",
          "test_in": "category",
          "test_out": "categories",
          "tests": [{ "alias": "pluralize" }, { "alias": "plural" }],
          "aliases": ["pluralize", "plural"],
          "require_path": "handlebars/helpers/string_formatting/pluralize",
          "class_namespace": "Handlebars::Helpers::StringFormatting::Pluralize"
        },
        {
          "name": "singularize",
          "description": "plural value is converted to singular from",
          "test_in": "categories",
          "test_out": "category",
          "tests": [{ "alias": "singularize" }, { "alias": "singular" }],
          "aliases": ["singularize", "singular"],
          "require_path": "handlebars/helpers/string_formatting/singularize",
          "class_namespace": "Handlebars::Helpers::StringFormatting::Singularize"
        }
      ]
    },
    {
      "active": true,
      "name": "comparison",
      "base_require": "handlebars/helpers/comparison",
      "base_namespace": "Handlebars::Helpers::Comparison",
      "description": "Comparison helpers, eg. or, and, equal, not equal, less than, greater than etc.",
      "examples": [
        "https://github.com/helpers/handlebars-helpers/blob/master/lib/comparison.js",
        "https://github.com/helpers/handlebars-helpers/blob/master/test/comparison.js"
      ],
      "helpers": [
        {
          "name": "or",
          "description": "return block when first value is truthy",
          "test_in": null,
          "test_out": null,
          "tests": [
            {
              "alias": "or",
              "expected_value": "param2",
              "params": [
                { "name": "p1", "value": null },
                { "name": "p2", "value": "param2" }
              ],
              "template": "\n            {{~#if (or p1 p2)~}}\n              {{p1}}{{p2}}\n            {{~/if~}}\n            "
            },
            {
              "alias": "any",
              "expected_value": "param2",
              "params": [
                { "name": "p1", "value": null },
                { "name": "p2", "value": "param2" }
              ],
              "template": "\n            {{~#if (any p1 p2)~}}\n              {{p1}}{{p2}}\n            {{~/if~}}\n            "
            }
          ],
          "aliases": ["or", "any"],
          "require_path": "handlebars/helpers/comparison/or",
          "class_namespace": "Handlebars::Helpers::Comparison::Or"
        },
        {
          "name": "and",
          "description": "return block when first value is truthy",
          "test_in": null,
          "test_out": null,
          "tests": [
            {
              "alias": "and",
              "expected_value": "all params exist",
              "params": [
                { "name": "p1", "value": "param1" },
                { "name": "p2", "value": "param2" }
              ],
              "template": "\n            {{~#if (and p1 p2)~}}\n              all params exist\n            {{~/if~}}\n            "
            },
            {
              "alias": "all",
              "expected_value": "all params exist",
              "params": [
                { "name": "p1", "value": "param1" },
                { "name": "p2", "value": "param2" }
              ],
              "template": "\n            {{~#if (all p1 p2)~}}\n              all params exist\n            {{~/if~}}\n            "
            }
          ],
          "aliases": ["and", "all"],
          "require_path": "handlebars/helpers/comparison/and",
          "class_namespace": "Handlebars::Helpers::Comparison::And"
        },
        {
          "name": "eq",
          "description": "return block when two values are equal",
          "test_in": null,
          "test_out": null,
          "tests": [
            {
              "alias": "eq",
              "expected_value": "params are equal",
              "params": [
                { "name": "p1", "value": "david" },
                { "name": "p2", "value": "david" }
              ],
              "template": "\n            {{~#if (eq p1 p2)~}}\n            params are equal\n            {{~/if~}}\n            "
            },
            {
              "alias": "equal",
              "expected_value": "params are equal",
              "params": [
                { "name": "p1", "value": "david" },
                { "name": "p2", "value": "david" }
              ],
              "template": "\n            {{~#if (equal p1 p2)~}}\n            params are equal\n            {{~/if~}}\n            "
            }
          ],
          "aliases": ["eq", "equal"],
          "require_path": "handlebars/helpers/comparison/eq",
          "class_namespace": "Handlebars::Helpers::Comparison::Eq"
        },
        {
          "name": "ne",
          "description": "return block when two values are NOT equal",
          "test_in": null,
          "test_out": null,
          "tests": [
            {
              "alias": "ne",
              "expected_value": "params are not equal",
              "params": [
                { "name": "p1", "value": "aaa" },
                { "name": "p2", "value": "bbb" }
              ],
              "template": "\n            {{~#if (ne p1 p2)~}}\n            params are not equal\n            {{~/if~}}\n            "
            },
            {
              "alias": "not_equal",
              "expected_value": "params are not equal",
              "params": [
                { "name": "p1", "value": "aaa" },
                { "name": "p2", "value": "bbb" }
              ],
              "template": "\n            {{~#if (not_equal p1 p2)~}}\n            params are not equal\n            {{~/if~}}\n            "
            }
          ],
          "aliases": ["ne", "not_equal"],
          "require_path": "handlebars/helpers/comparison/ne",
          "class_namespace": "Handlebars::Helpers::Comparison::Ne"
        },
        {
          "name": "lt",
          "description": "return block when first parameter is less than second paramater",
          "test_in": null,
          "test_out": null,
          "tests": [
            {
              "alias": "lt",
              "expected_value": "1 is less than 2",
              "params": [
                { "name": "p1", "value": 1 },
                { "name": "p2", "value": 2 }
              ],
              "template": "\n            {{~#if (lt p1 p2)~}}\n            1 is less than 2\n            {{~/if~}}\n            "
            },
            {
              "alias": "less_than",
              "expected_value": "1 is less than 2",
              "params": [
                { "name": "p1", "value": 1 },
                { "name": "p2", "value": 2 }
              ],
              "template": "\n            {{~#if (less_than p1 p2)~}}\n            1 is less than 2\n            {{~/if~}}\n            "
            }
          ],
          "aliases": ["lt", "less_than"],
          "require_path": "handlebars/helpers/comparison/lt",
          "class_namespace": "Handlebars::Helpers::Comparison::Lt"
        },
        {
          "name": "gt",
          "description": "return block when first parameter is greater than second paramater",
          "test_in": null,
          "test_out": null,
          "tests": [
            {
              "alias": "gt",
              "expected_value": "2 is greater than 1",
              "params": [
                { "name": "p1", "value": 2 },
                { "name": "p2", "value": 1 }
              ],
              "template": "\n            {{~#if (gt p1 p2)~}}\n            2 is greater than 1\n            {{~/if~}}\n            "
            },
            {
              "alias": "greater_than",
              "expected_value": "2 is greater than 1",
              "params": [
                { "name": "p1", "value": 2 },
                { "name": "p2", "value": 1 }
              ],
              "template": "\n            {{~#if (greater_than p1 p2)~}}\n            2 is greater than 1\n            {{~/if~}}\n            "
            }
          ],
          "aliases": ["gt", "greater_than"],
          "require_path": "handlebars/helpers/comparison/gt",
          "class_namespace": "Handlebars::Helpers::Comparison::Gt"
        }
      ]
    }
  ]
}
